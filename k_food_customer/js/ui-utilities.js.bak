/**
 * UI utilities for KFood Delights
 * Requires: notification-system.js
 */

class UIUtilities {
  static showConfirmationModal(options = {}) {
    const {
      title = "Confirm",
      message = "",
      type = "default",
      confirmText = "Confirm",
      cancelText = "Cancel",
      onConfirm = () => {},
      onCancel = () => {},
    } = options;

    const modal = document.createElement("div");
    modal.className = "kfood-modal";
    modal.innerHTML = `
            <div class="modal-content ${type}">
                <div class="modal-header">
                    <h2>${title}</h2>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    ${message}
                </div>
                <div class="modal-footer">
                    <button class="btn-cancel">${cancelText}</button>
                    <button class="btn-confirm">${confirmText}</button>
                </div>
            </div>
        `;

    document.body.appendChild(modal);
    document.body.classList.add("modal-open");

    const closeBtn = modal.querySelector(".modal-close");
    const confirmBtn = modal.querySelector(".btn-confirm");
    const cancelBtn = modal.querySelector(".btn-cancel");

    const closeModal = () => {
      modal.remove();
      document.body.classList.remove("modal-open");
    };

    closeBtn.onclick = () => {
      onCancel();
      closeModal();
    };

    confirmBtn.onclick = () => {
      onConfirm();
      closeModal();
    };

    cancelBtn.onclick = () => {
      onCancel();
      closeModal();
    };

    // Close on outside click
    modal.onclick = (e) => {
      if (e.target === modal) {
        onCancel();
        closeModal();
      }
    };

    return modal;
  }

  static showLoadingOverlay(message = "Loading...") {
    const overlay = document.createElement("div");
    overlay.className = "loading-overlay";
    overlay.innerHTML = `
            <div class="loading-spinner"></div>
            <div class="loading-message">${message}</div>
        `;

    document.body.appendChild(overlay);
    document.body.classList.add("loading");

    return {
      update: (newMessage) => {
        overlay.querySelector(".loading-message").textContent = newMessage;
      },
      hide: () => {
        overlay.remove();
        document.body.classList.remove("loading");
      },
    };
  }

  static toast(message, type, duration) {
    type = type || "info";
    duration = duration || 3000;
    
    var toast = document.createElement('div');
    toast.className = 'kfood-toast toast-' + type;
    toast.innerHTML = 
      '<div class="toast-content">' +
        '<i class="toast-icon fas ' + this.getToastIcon(type) + '"></i>' +
        '<div class="toast-message">' + message + '</div>' +
      '</div>';

    var container = document.querySelector('.toast-container') || this.createToastContainer();
    container.appendChild(toast);

    // Trigger reflow for animation
    toast.offsetHeight;
    toast.classList.add('show');

    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => toast.remove(), 300);
    }, duration);

    return toast;
  }

  static getToastIcon(type) {
    switch (type) {
      case 'success': return 'fa-check-circle';
      case 'error': return 'fa-exclamation-circle';
      case 'warning': return 'fa-exclamation-triangle';
      default: return 'fa-info-circle';
    }
  }

  static createToastContainer() {
    const container = document.createElement('div');
    container.className = 'toast-container';
    document.body.appendChild(container);
    return container;
  }

  static showError(message) {
    return this.toast(message, 'error');
  }

  static showSuccess(message) {
    return this.toast(message, 'success');
  }

  static showWarning(message) {
    return this.toast(message, 'warning');
  }

  static showInfo(message) {
    return this.toast(message, 'info');
  }

  static validateForm(form, options = {}) {
    const {
      showErrors = true,
      scrollToError = true,
      errorClass = 'invalid'
    } = options;

    if (!(form instanceof HTMLFormElement)) {
      throw new Error('Invalid form element provided');
    }

    const errors = [];
    let firstErrorElement = null;

    // Clear previous errors
    form.querySelectorAll('.' + errorClass).forEach(el => el.classList.remove(errorClass));
    form.querySelectorAll('.error-message').forEach(el => el.remove());

    // Validate each form element
    Array.from(form.elements).forEach(element => {
      if (!element.name || element.disabled) return;

      const value = element.value.trim();
      const required = element.hasAttribute('required');
      const pattern = element.pattern;
      const type = element.type;
      const min = element.min;
      const max = element.max;
      const minLength = element.minLength;
      const maxLength = element.maxLength;

      let error = null;

      // Required field validation
      if (required && !value) {
        error = 'This field is required';
      }
      // Pattern validation
      else if (pattern && value && !new RegExp(pattern).test(value)) {
        error = element.title || 'Please match the requested format';
      }
      // Type validation
      else if (type === 'email' && value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
        error = 'Please enter a valid email address';
      }
      else if (type === 'tel' && value && !/^\+?[\d\s-]{10,}$/.test(value)) {
        error = 'Please enter a valid phone number';
      }
      // Range validation
      else if ((type === 'number' || type === 'range') && value) {
        const numValue = parseFloat(value);
        if (min && numValue < parseFloat(min)) {
          error = `Value must be greater than or equal to ${min}`;
        }
        if (max && numValue > parseFloat(max)) {
          error = `Value must be less than or equal to ${max}`;
        }
      }
      // Length validation
      else if (minLength && value.length < parseInt(minLength)) {
        error = `Please enter at least ${minLength} characters`;
      }
      else if (maxLength && value.length > parseInt(maxLength)) {
        error = `Please enter no more than ${maxLength} characters`;
      }

      if (error) {
        errors.push({ element, message: error });
        if (!firstErrorElement) firstErrorElement = element;

        if (showErrors) {
          element.classList.add(errorClass);
          const errorElement = document.createElement('div');
          errorElement.className = 'error-message';
          errorElement.textContent = error;
          element.parentNode.appendChild(errorElement);
        }
      }
    });

    if (scrollToError && firstErrorElement) {
      firstErrorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    return {
      valid: errors.length === 0,
      errors,
      firstError: firstErrorElement
    };
  }

    const toast = document.createElement("div");
    toast.className = `kfood-toast ${type}`;
    toast.textContent = message;

    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), duration);

    return toast;
  }

  static validate(form) {
    if (!form || !(form instanceof HTMLFormElement)) {
      throw new Error("Invalid form element provided");
    }

    const errors = [];
    const data = new FormData(form);
    const values = Object.fromEntries(data.entries());

    // Required fields
    form.querySelectorAll("[required]").forEach((field) => {
      if (!values[field.name]) {
        errors.push(
          `${field.getAttribute("data-label") || field.name} is required`
        );
      }
    });

    // Email validation
    const emailFields = form.querySelectorAll('input[type="email"]');
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    emailFields.forEach((field) => {
      if (values[field.name] && !emailRegex.test(values[field.name])) {
        errors.push(`Please enter a valid email address`);
      }
    });

    // Phone validation
    const phoneFields = form.querySelectorAll('input[type="tel"]');
    const phoneRegex = /^\+?[0-9]{10,}$/;
    phoneFields.forEach((field) => {
      if (values[field.name] && !phoneRegex.test(values[field.name])) {
        errors.push(`Please enter a valid phone number`);
      }
    });

    return {
      isValid: errors.length === 0,
      errors,
      values,
    };
  }

  static addStyles() {
    const styles = `
            .kfood-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 1000;
            }

            .modal-content {
                background: white;
                border-radius: 8px;
                max-width: 500px;
                width: 90%;
                animation: modalSlideIn 0.3s ease-out;
            }

            .modal-header {
                padding: 20px;
                border-bottom: 1px solid #eee;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .modal-body {
                padding: 20px;
            }

            .modal-footer {
                padding: 20px;
                border-top: 1px solid #eee;
                display: flex;
                justify-content: flex-end;
                gap: 10px;
            }

            .loading-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(255, 255, 255, 0.9);
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                z-index: 1000;
            }

            .loading-spinner {
                width: 40px;
                height: 40px;
                border: 4px solid #f3f3f3;
                border-top: 4px solid #ff6b6b;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }

            .loading-message {
                margin-top: 20px;
                color: #333;
                font-size: 16px;
            }

            .kfood-toast {
                position: fixed;
                bottom: 20px;
                right: 20px;
                background: white;
                padding: 10px 20px;
                border-radius: 4px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                animation: toastSlideIn 0.3s ease-out;
            }

            @keyframes modalSlideIn {
                from {
                    transform: translateY(-20px);
                    opacity: 0;
                }
                to {
                    transform: translateY(0);
                    opacity: 1;
                }
            }

            @keyframes toastSlideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;

    const styleSheet = document.createElement("style");
    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);
  }
}

// Initialize styles
UIUtilities.addStyles();

// Export for modules
window.UIUtilities = UIUtilities;
